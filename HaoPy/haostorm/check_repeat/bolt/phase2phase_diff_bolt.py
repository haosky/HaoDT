# -*- coding: utf-8 -*-from pyleus.storm import SimpleBoltimport tracebackimport copyfrom pyleus.storm import namedtuplefrom haounits.loggerDefTools import get_defTestLoggerimport jiebafrom haounits.loggerDefTools import get_defFileLogger as getlogfrom haoml.articles_simhash_v2 import artcles_simhashfrom haoml.articlesimhash import mark_same_contentimport haostorm.check_repeat.qdsl as qsdlparentimport sysreload(sys)sys.setdefaultencoding('utf-8')__author__ = 'hao'log = getlog(fileName="phase2phase_diff_bolt.log",loggerMain='phase2phase_diff_bolt')# import logging# log = get_defTestLogger(level=logging.DEBUG)pass_obj = namedtuple("doc", "key value")import jsonclass phase2phase_diff_bolt(SimpleBolt):    OUTPUT_FIELDS = pass_obj    PHASE_TO_DOC_LEN = 4    PHASE_RAW_LEN = 5    '''    ->es_searcch_phase2doc_bolt    比较句子差异，并记录其他业务相关的字段信息    content input should be unicode    '''    def initialize(self):        self.sa = artcles_simhash()    def process_tuple(self, tup):        try:            data = tup.values            # log.info(data)            sen_id = data[0]            id_split = sen_id.split(':')            gets = data[1]            # 原文章标题            project = gets[0]            # 原文章句子内容            doc_phase = gets[1]            # 相似句子相关字段信息            sam_doc_prop = gets[2][2]            log.info('data detail '+json.dumps(sam_doc_prop,ensure_ascii=False))            # 相似片段内容            sam_phase = gets[2][0]            #　相似片段ｉｄ == '%s:%s' % (src_doc_id, i)            same_id = gets[3]            # 计算相似片段差异 leftcontent : rightcontent            right_doc_phase, right_doc_phase_word_count = mark_same_content(copy.deepcopy(sam_phase.strip()),                                                                            copy.deepcopy(doc_phase.strip()), "sim gray")            left_sam_phase, left_sam_phase_word_count = mark_same_content(copy.deepcopy(doc_phase.strip()),                                                                          copy.deepcopy(sam_phase.strip()),"lsim gray")            log.info('left:%s, right:%s , right_doc_phase_word_count %s: ' %(doc_phase,sam_phase , left_sam_phase_word_count))            phase_sam_score = float(right_doc_phase_word_count * 100) / float(len(unicode(doc_phase.strip())))            sim_rate_value = round(phase_sam_score,3)            '''            sam_doc_prop ::             {                        "project": doc_body["project"],                        "finical_unit": doc_body["finical_unit"],                        "finical_name": doc_body["finical_name"],                        "date": doc_body["date"],                        "doc": doc_body["doc"],                        "unit": doc_body["unit"],                        "finical": doc_body["finical"],                        "fl_type": doc_body["fl_type"],                        "uuid": doc_body["_uuid"],                        "doc_content_len": len(doc_phase),                        "sam_content_len": dlen,                        "sentences_count""sentences_count                    }            '''            sam_detail = {                "same_doc_title": sam_doc_prop['project'],                "find_sam_sentence": left_sam_phase,                "sam_in_phase": "",                "doc_sentence": right_doc_phase,                "submiter": sam_doc_prop['submiter'],                "upload_at": sam_doc_prop['date'],                "wordcount": len(doc_phase.strip()),                "sim_rate_value": sim_rate_value,                "sim_rate": unicode(sim_rate_value)+u'%',                "doc_sentence_word_count": right_doc_phase_word_count,                "sam_sentence_word_count": left_sam_phase_word_count,                "doc_sentence_id": id_split[1],                "sam_sentence_id": same_id,                "sentences_count": sam_doc_prop['sentences_count'],                "sentence": doc_phase,                "find_sentence": sam_phase            }            result = (sen_id, [project, sam_detail])            log.info(json.dumps(sam_detail,ensure_ascii=False))            self.emit(result)        except Exception as e:            log.error(traceback.format_exc().replace('\n',' '))if __name__ == "__main__":    phase2phase_diff_bolt().run()# @Test# from haostorm.testSite.SimpleBolt_MN import SimpleBolt# if __name__ == '__main__':#     es_sd = phase2phase_diff_bolt()#     es_sd.initialize()#     class tup :#         values=(u'159574260578990156947537adf5e4010d5cc48f79d9ceae79c6:149', [u'应当有明确的被告',u'应当有明确的被告', [u'应当有明确的被告', 151, {'project': u'应当有明确的被告', 'finical_unit': u'\u6559\u80b2', 'unit': u';\u884c\u653f\u6cd5\u7c7b;\u6559\u80b2;\u6559\u80b2\u7efc\u5408\u89c4\u5b9a;', 'date': u'\\N', 'doc': u'\u6559\u7b56[1995]4\u53f7', 'fl_type': u'\u90e8\u59d4\u89c4\u7ae0\u53ca\u6587\u4ef6', 'content_len': 2487, 'uuid': u'15994285707331215007fdac42722f20a5463be19e5ac5010c1b', 'finical_name': u'\u6559\u80b2\u7efc\u5408\u89c4\u5b9a', 'finical': u'3038','sentences_count':  10}], u'15994285707331215007fdac42722f20a5463be19e5ac5010c1b:149'])##     es_sd.process_tuple(tup())